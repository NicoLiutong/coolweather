https://guides.github.com/activities/hello-world/
https://help.github.com/articles/syncing-a-fork/
https://www.zhihu.com/question/20070065
https://developer.android.com/reference/classes.html
checkbox自定義圖片：http://blog.csdn.net/bear_huangzhen/article/details/47044733
修改光標顏色：http://blog.csdn.net/drevy/article/details/7302345
自定義button樣式：http://blog.csdn.net/jack__frost/article/details/51959544；http://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html
edittext顯示和隱藏密碼：http://blog.csdn.net/luck_apple/article/details/7075111
assets图片保存到本地sdcard：http://blog.csdn.net/zhang_yanye/article/details/48399593
圖片加載：http://blog.csdn.net/lmj623565791/article/details/39943731/
退出程序：http://blog.csdn.net/u012210186/article/details/41681031
選擇加載、拍照、裁剪並保存：http://blog.csdn.net/xuehuayous/article/details/51324656
uCorp：http://blog.csdn.net/copy_yuan/article/details/51727070；http://blog.csdn.net/u011771755/article/details/50676888；https://my.oschina.net/u/1399599/blog/853374
拍照或相冊選擇：http://www.2cto.com/kf/201610/552599.html
android中自定義view的自定義屬性：http://blog.csdn.net/xmxkf/article/details/51468648
editview獲取焦點：http://www.cnblogs.com/colorful-life/p/4617253.html
editview取消焦點：http://blog.csdn.net/subaohao/article/details/9043895
裁剪图片：https://github.com/oginotihiro/cropview
android7.0調用相機：http://blog.csdn.net/u010873775/article/details/72811581；http://mt.sohu.com/it/d20170425/136282885_659256.shtml；
                    http://blog.csdn.net/u010212089/article/details/53538680；http://blog.csdn.net/u010356768/article/details/70808162
android7.0動態權限：http://blog.csdn.net/u011216417/article/details/69916964





public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    public static final int REQUEST_PICK = 9162;

    public static final int TAKE_PHOTO = 1;

    private CropView cropView;
    private ImageView resultIv;
    private LinearLayout btnlay;
    private Button doneBtn;
    private Button cancelBtn;

    private Bitmap croppedBitmap;

    private Uri imageUri;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        cropView = (CropView) findViewById(R.id.cropView);
        resultIv = (ImageView) findViewById(R.id.resultIv);
        btnlay = (LinearLayout) findViewById(R.id.btnlay);
        doneBtn = (Button) findViewById(R.id.doneBtn);
        cancelBtn = (Button) findViewById(R.id.cancelBtn);

        doneBtn.setOnClickListener(this);
        cancelBtn.setOnClickListener(this);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_pick:
                reset();

                Intent intent = new Intent(Intent.ACTION_GET_CONTENT).setType("image/*");
                startActivityForResult(intent, REQUEST_PICK);
                return true;
            case R.id.action_photo:
                try{
                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "Crop");
                    if(!file.exists()){
                        file.mkdir();
                    }
                    File outputImage = new File(file,"photo.jpg");
                    if(outputImage.exists()){
                        outputImage.delete();
                    }
                    outputImage.createNewFile();
                }catch (IOException e){
                    e.printStackTrace();
                }
                if(Build.VERSION.SDK_INT <= 24){
                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "Crop");
                    File outputImage = new File(file,"photo.jpg");
                   imageUri = FileProvider.getUriForFile(MainActivity.this,"com.example.myapplication",outputImage);
                }else {
                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "Crop");
                    File outputImage = new File(file,"photo.jpg");
                    imageUri = Uri.fromFile(outputImage);
                }
                Intent intent1 = new Intent("android.media.action.IMAGE_CAPTURE");
                intent1.putExtra(MediaStore.EXTRA_OUTPUT,imageUri);
                startActivityForResult(intent1,TAKE_PHOTO);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK && requestCode == REQUEST_PICK) {
            Uri source = data.getData();

            cropView.setVisibility(View.VISIBLE);
            btnlay.setVisibility(View.VISIBLE);

            cropView.of(source).asSquare().initialize(MainActivity.this);
        }
        if(resultCode == RESULT_OK && requestCode == TAKE_PHOTO){
            cropView.setVisibility(View.VISIBLE);
            btnlay.setVisibility(View.VISIBLE);
            cropView.of(imageUri).asSquare().initialize(MainActivity.this);
        }
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        if (id == R.id.doneBtn) {
            final ProgressDialog dialog = ProgressDialog.show(MainActivity.this, null, "Please wait…", true, false);

            cropView.setVisibility(View.GONE);
            btnlay.setVisibility(View.GONE);
            resultIv.setVisibility(View.VISIBLE);

            new Thread() {
                public void run() {
                    croppedBitmap = cropView.getOutput();

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            resultIv.setImageBitmap(croppedBitmap);
                        }
                    });
                    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "Crop");
                    Uri destination = Uri.fromFile(new File(file, "cropped.jpg"));
                    CropUtil.saveOutput(MainActivity.this, destination, croppedBitmap, 90);
                    Log.d("url",destination.toString());
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            dialog.dismiss();
                        }
                    });
                }
            }.start();
        } else if (id == R.id.cancelBtn) {
            reset();
        }
    }

    private void reset() {
        cropView.setVisibility(View.GONE);
        resultIv.setVisibility(View.GONE);
        btnlay.setVisibility(View.GONE);
        resultIv.setImageBitmap(null);
    }
}







void createExternalStoragePrivateFile() {
    // Create a path where we will place our private file on external
    // storage.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");

    try {
        // Very simple code to copy a picture from the application's
        // resource into the external file.  Note that this code does
        // no error checking, and assumes the picture is small (does not
        // try to copy it in chunks).  Note that if external storage is
        // not currently mounted this will silently fail.
        InputStream is = getResources().openRawResource(R.drawable.balloons);
        OutputStream os = new FileOutputStream(file);
        byte[] data = new byte[is.available()];
        is.read(data);
        os.write(data);
        is.close();
        os.close();
    } catch (IOException e) {
        // Unable to create file, likely because external storage is
        // not currently mounted.
        Log.w("ExternalStorage", "Error writing " + file, e);
    }
}

void deleteExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        file.delete();
    }
}

boolean hasExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        return file.exists();
    }
    return false;
}
