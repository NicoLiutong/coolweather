https://guides.github.com/activities/hello-world/
https://help.github.com/articles/syncing-a-fork/
https://www.zhihu.com/question/20070065
https://developer.android.com/reference/classes.html
checkbox自定義圖片：http://blog.csdn.net/bear_huangzhen/article/details/47044733
修改光標顏色：http://blog.csdn.net/drevy/article/details/7302345
自定義button樣式：http://blog.csdn.net/jack__frost/article/details/51959544；http://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html
edittext顯示和隱藏密碼：http://blog.csdn.net/luck_apple/article/details/7075111
assets图片保存到本地sdcard：http://blog.csdn.net/zhang_yanye/article/details/48399593
圖片加載：http://blog.csdn.net/lmj623565791/article/details/39943731/
退出程序：http://blog.csdn.net/u012210186/article/details/41681031
選擇加載、拍照、裁剪並保存：http://blog.csdn.net/xuehuayous/article/details/51324656
uCorp：http://blog.csdn.net/copy_yuan/article/details/51727070；http://blog.csdn.net/u011771755/article/details/50676888；https://my.oschina.net/u/1399599/blog/853374
拍照或相冊選擇：http://www.2cto.com/kf/201610/552599.html
android中自定義view的自定義屬性：http://blog.csdn.net/xmxkf/article/details/51468648
editview獲取焦點：http://www.cnblogs.com/colorful-life/p/4617253.html
editview取消焦點：http://blog.csdn.net/subaohao/article/details/9043895
裁剪图片：https://github.com/oginotihiro/cropview
android7.0調用相機：http://blog.csdn.net/u010873775/article/details/72811581；http://mt.sohu.com/it/d20170425/136282885_659256.shtml；
                    http://blog.csdn.net/u010212089/article/details/53538680；http://blog.csdn.net/u010356768/article/details/70808162
android7.0動態權限：http://blog.csdn.net/u011216417/article/details/69916964：http://blog.csdn.net/lylodyf/article/details/53158091
优雅地实现多个样式的recycler：http://zpayh.xyz/
NavigationView使用：http://blog.csdn.net/u012702547/article/details/51253222
洪洋通用ListView的Adapter和ViewHolder封裝：http://blog.csdn.net/lmj623565791/article/details/38902805/
洪洋通用RecyclerView的Adapter和ViewHolder封裝：http://blog.csdn.net/lmj623565791/article/details/51118836/
RecyclerView實現分組：http://blog.csdn.net/nothingl3/article/details/49049721
RecyclerView長按多選：http://blog.csdn.net/Loften_93663469/article/details/51376703
AndroidStudio使用:http://www.open-open.com/lib/view/open1468121363300.html;http://www.open-open.com/lib/view/open1468121618489.html;
RecyclerVtew滑动监听：http://blog.csdn.net/wyb112233/article/details/50429077
recyclerView下拉刷新、上划加载：https://github.com/llxdaxia/RecyclerView

Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + "TestChat"






package com.example.bianqian.fragment;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.LinearLayout;

import com.example.bianqian.R;
import com.example.bianqian.activity.EditingTextActivity;
import com.example.bianqian.adapter.AdapterDateList;
import com.example.bianqian.adapter.MultiItemTypeSupport;
import com.example.bianqian.adapter.MyAdapter;
import com.example.bianqian.adapter.MyViewHolder;
import com.example.bianqian.bmobbasic.User;
import com.example.bianqian.bmobbasic.UserNote;
import com.example.bianqian.db.LocalUserNote;
import com.example.bianqian.impl.GetFindData;
import com.example.bianqian.util.UpdateUserNote;

import org.litepal.crud.DataSupport;

import java.util.ArrayList;
import java.util.List;

import cn.bmob.v3.BmobUser;

/**
 * Created by 刘通 on 2017/6/15.
 */

public class MoodNote extends Fragment {

    public static final int TITLE = 1;
    public static final int NOTEITEM = 2;
    public static final int NOLAYOUT = 3;

    private static final String ALL = "all";
    private static final String RED = "red";
    private static final String BLUE = "blue";
    private static final String YELLOW = "yellow";
    private static final String GREEN = "green";
    private static final String PURPLE = "purple";
    private static final String PINK = "pink";
    private static final String GRAY = "gray";

    private String mood = ALL;

    private User user;

    private ProgressDialog dialog ;

    private RecyclerView mainRecyclerView;

    private Button cancleButton,deletButton;

    private FloatingActionButton addNewNoteButton;

    private LinearLayout cancleDeletLayout;

    private SwipeRefreshLayout swipeRefreshNote;

    private List<AdapterDateList> data = new ArrayList<>();

    private List<LocalUserNote> localUserNotes = new ArrayList<>();
    //private List<UserNote> allData;

    private MyAdapter<AdapterDateList> adapter;

    private MultiItemTypeSupport<AdapterDateList> multiItemTypeSupport;

    private GetFindData<UserNote> changeData;

    private boolean isUpdateFromInternet = true;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        final View view = inflater.inflate(R.layout.main_activity_recycler,container,false);
        user = BmobUser.getCurrentUser(User.class);
        mainRecyclerView = (RecyclerView) view.findViewById(R.id.main_recyclerview);
        cancleDeletLayout = (LinearLayout) view.findViewById(R.id.cancle_delet_layout);
        addNewNoteButton = (FloatingActionButton) view.findViewById(R.id.floating_newitem_button);
        swipeRefreshNote = (SwipeRefreshLayout) view.findViewById(R.id.swipe_refresh_note);
        swipeRefreshNote.setColorSchemeResources(R.color.text_background_purple,R.color.colorAccent,R.color.text_background_pink,R.color.text_background_red);

        if(DataSupport.findAll(LocalUserNote.class) == null || DataSupport.findAll(LocalUserNote.class).size() == 0){
            isUpdateFromInternet = true;
        }else {
            isUpdateFromInternet = false;
        }

        dialog = new ProgressDialog(getActivity());
        swipeRefreshNote.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                intialize();
            }
        });

        cancleDeletLayout.setVisibility(View.GONE);
        cancleButton = (Button) view.findViewById(R.id.cancle_button);
        deletButton = (Button) view.findViewById(R.id.delet_button);

        final LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);

        multiItemTypeSupport = new MultiItemTypeSupport<AdapterDateList>() {
            @Override
            public int getLayoutId(int itenType) {
                switch (itenType){
                    case TITLE : return R.layout.date_item;
                    case NOTEITEM : return R.layout.item_note;
                    default: return R.layout.item_nothing;
                }
            }


            @Override
            public int getItemViewType(int position, AdapterDateList dataList) {
                if(data.size() != 0){
                    if(dataList.isDataTile()){
                        return TITLE;
                    }else {
                        return NOTEITEM;
                    }
                }
                    return NOLAYOUT;

                }
            };
        changeData = new GetFindData<UserNote>() {
            @Override
            public void returnFindData(List<UserNote> findData,Boolean isSuccess) {
                if(isSuccess){
                    for (int i = 0;i < findData.size();i ++){
                       LocalUserNote userNote = new LocalUserNote();
                        userNote.setNoteId(findData.get(i).getObjectId());
                        userNote.setUpdateDate(findData.get(i).getUpdateDate());
                        userNote.setNote(findData.get(i).getNote());
                        userNote.setUser(findData.get(i).getUser());
                        userNote.setMoonColor(findData.get(i).getMoodColor());
                        userNote.setUpdateType("finish");
                        userNote.save();
                    }
                    isUpdateFromInternet = false;
                updateData();
                }else {
                    swipeRefreshNote.setRefreshing(false);
                    isUpdateFromInternet = true;
                }
            }

            @Override
            public void deletDataResult(List<LocalUserNote> deletSuccessItem) {
                //删除完数据后，获取删除成功的项目并更新
                intialize();

            }

            @Override
            public void creatNotesResult(List<LocalUserNote> creatSuccessItems) {

            }

            @Override
            public void updateNotesResult(List<LocalUserNote> updateSuccessItems) {

            }

            @Override
            public void creatDataResult(Boolean isSuccess) {     }

            @Override
            public void upDataResult(Boolean isSuccess) {        }
        };

        //intialize();
        adapter = new MyAdapter<AdapterDateList>(getContext(),data,multiItemTypeSupport) {
            @Override
            public void convert(final MyViewHolder holder, int viewType, AdapterDateList adapterDate, boolean isClickLong, int positoin) {
                switch (viewType){
                    case TITLE :
                        holder.setText(R.id.item_date_title,adapterDate.getDate().split("-")[0] + "年" + adapterDate.getDate().split("-")[1] + "月");
                        holder.setInvisiblity(R.id.note_top_line);
                        intializeRecycler(holder,adapterDate,isClickLong,positoin);
                        break;
                    case NOTEITEM :
                        intializeRecycler(holder,adapterDate,isClickLong,positoin);
                        break;
                    default:
                        break;
                }
            }
        };
        //Log.d("1","start");
        mainRecyclerView.setLayoutManager(layoutManager);
        mainRecyclerView.setAdapter(adapter);

        addNewNoteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getContext(), EditingTextActivity.class);
                intent.putExtra(EditingTextActivity.TYPE,EditingTextActivity.CREATNOTE);
                intent.putExtra(EditingTextActivity.NOTEID,"");
                intent.putExtra(EditingTextActivity.MOOD,"red");
                intent.putExtra(EditingTextActivity.DATE,"");
                intent.putExtra(EditingTextActivity.TEXT,"");
                getContext().startActivity(intent);
            }
        });


        cancleButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                adapter.clearSelectItems();
                adapter.setClickLong(false);
                notifyDataSetChanged(mood,localUserNotes);
                cancleDeletLayout.setVisibility(View.GONE);
                addNewNoteButton.setVisibility(View.VISIBLE);
            }
        });

        deletButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.setMessage("删除中…");
                dialog.show();
                //dialog = ProgressDialog.show(getActivity(), null, "删除中…", true, false);
                List<LocalUserNote> deletNotes = new ArrayList<LocalUserNote>();
                List<Integer> position = adapter.getSelectItems();
                for(int i : position){
                    deletNotes.add(data.get(i).getLocalUserNote());
                }

                //UpdateUserNote.deletNote(localUserNotes,changeData);
				for(int i = 0;i < deletNotes.size(); i ++){
					LocalUserNote updateUserNote = new LocalUserNote();
					updateUserNote.setUpdateType("delet");
					updateUserNote.update(deletNotes.get(i).getId());
				}
				updateData();
                adapter.clearSelectItems();
                adapter.setClickLong(false);
                cancleDeletLayout.setVisibility(View.GONE);
                addNewNoteButton.setVisibility(View.VISIBLE);
            }
        });
        return view;
    }

   @Override
    public void onResume() {
       //Log.d("1","1");
       //data.clear();
       //adapter.notifyDataSetChanged();
       swipeRefreshNote.setRefreshing(true);
       intialize();
        super.onResume();
    }

    private void intialize(){
        //Log.d("1","2");
        if(isUpdateFromInternet){
        UpdateUserNote.getAuthorNote(user,getContext(),changeData);
        }else {
           updateData();
        }
    }

    private void updateData(){
        List<LocalUserNote> findUserNote = DataSupport.order("updateDate desc").find(LocalUserNote.class);
        for (LocalUserNote userNote : findUserNote){
		if(!userNotes.getUpdateType().equal("delet")){
			localUserNotes.add(userNote);
			}    
        }
            notifyDataSetChanged(mood,localUserNotes);
    }

    public void intializeRecycler(final MyViewHolder holder, final AdapterDateList adapterDate, final boolean isClickLong, int positoin){
        int circleColor,backgroundColor,textColor;
        switch(adapterDate.getLocalUserNote().getMoonColor()){
            case  "red" : circleColor = R.drawable.red_circle;
                backgroundColor = R.color.text_background_red;
                textColor = R.color.text_red;
                break;

            case "green" : circleColor = R.drawable.green_circle;
                backgroundColor = R.color.text_background_green;
                textColor = R.color.text_green;
                break;

            case "blue" : circleColor = R.drawable.blue_circle;
                backgroundColor = R.color.text_background_blue;
                textColor = R.color.text_blue;
                break;

            case "pink" : circleColor = R.drawable.pink_circle;
                backgroundColor = R.color.text_background_pink;
                textColor = R.color.text_pink;
                break;

            case "purple" : circleColor = R.drawable.purple_circle;
                backgroundColor = R.color.text_background_purple;
                textColor = R.color.text_purple;
                break;

            case "yellow" : circleColor = R.drawable.yellow_circle;
                backgroundColor = R.color.text_background_yellow;
                textColor = R.color.text_yellow;
                break;

            case "gray" : circleColor = R.drawable.gray_circle;
                backgroundColor = R.color.text_background_gray;
                textColor = R.color.text_gray;
                break;
            default: circleColor = R.drawable.red_circle;
                backgroundColor = R.color.text_background_red;
                textColor = R.color.text_red;
                break;
        }

        holder.setCircleColor(R.id.note_circle,circleColor);
        //holder.setCardBackGround(R.id.note_card_color,backgroundColor);
        holder.setBackGround(R.id.note_text,backgroundColor);
        holder.setTextColor(R.id.note_text,textColor);
        holder.setText(R.id.note_text,adapterDate.getLocalUserNote().getNote());
        holder.setText(R.id.note_item_date,adapterDate.getLocalUserNote().getUpdateDate().toString());

        if(isClickLong){
            holder.setVisiblity(R.id.note_checkbox);
            holder.setChecked(R.id.note_checkbox,adapter.isSelectItems(holder.getAdapterPosition()));
        }else {
            holder.setInvisiblity(R.id.note_checkbox);
        }


            holder.setOnClickListener(R.id.note_card_color,new View.OnClickListener(){
                @Override
                public void onClick(View v){
                    if(!isClickLong){
                    //傳入數據，進入編輯頁面
                        Intent intent = new Intent(getContext(), EditingTextActivity.class);
                        intent.putExtra(EditingTextActivity.TYPE,EditingTextActivity.CHANGENOTE);
                        intent.putExtra(EditingTextActivity.NOTEID,adapterDate.getLocalUserNote().getNoteId());
                        intent.putExtra(EditingTextActivity.MOOD,adapterDate.getLocalUserNote().getMoonColor());
                        intent.putExtra(EditingTextActivity.DATE,adapterDate.getLocalUserNote().getUpdateDate().toString());
                        intent.putExtra(EditingTextActivity.TEXT,adapterDate.getLocalUserNote().getNote());
                        getContext().startActivity(intent);
                    }
                }
            });
            holder.setOnLongClickListener(R.id.note_card_color, new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    adapter.setClickLong(true);
                    cancleDeletLayout.setVisibility(View.VISIBLE);
                    addNewNoteButton.setVisibility(View.GONE);
                    notifyDataSetChanged(mood,localUserNotes);
                    return true;
                }
            });

        //checkbox的點擊事件
        holder.setOnCheckedChangeLister(R.id.note_checkbox, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
              if(isChecked){
                  adapter.addCheck(holder.getAdapterPosition());
              } else {
                  adapter.removeCheck(holder.getAdapterPosition());
              }
            }
        });

    }

    private void notifyDataSetChanged(String mood,List<LocalUserNote> alldata){
        //Log.d("1","4");
        data.clear();
        String date = "2050-12-12 24:59:59";
        for(AdapterDateList i:getListWithMood(mood,alldata)){
            if(i.getLocalUserNote().getUpdateDate().toString().split("-")[0].equals(date.split("-")[0])&&i.getLocalUserNote().getUpdateDate().toString().split("-")[1].equals(date.split("-")[1])){
               i.setDataTile(false);
                i.setDate(i.getLocalUserNote().getUpdateDate().toString());
                data.add(i);
            }else {
                date = i.getLocalUserNote().getUpdateDate().toString();
                i.setDataTile(true);
                i.setDate(i.getLocalUserNote().getUpdateDate().toString());
                data.add(i);
            }
        }
        adapter.notifyDataSetChanged();
        swipeRefreshNote.setRefreshing(false);
        dialog.dismiss();
    }

    private List<AdapterDateList> getListWithMood(String mood,List<LocalUserNote> alldata){
        List<AdapterDateList> adapterDateLists = new ArrayList<>();
        switch (mood){
            case RED: for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("red")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case GREEN : for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("green")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case BLUE : for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("blue")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case YELLOW : for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("yellow")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case PURPLE :  for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("purple")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case PINK : for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("pink")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            case GRAY : for (LocalUserNote i:alldata){
                if(i.getMoonColor().equals("gray")){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
            }
                return adapterDateLists;

            default:
                for(LocalUserNote i:alldata){
                    AdapterDateList adapterDateList = new AdapterDateList();
                    adapterDateList.setLocalUserNote(i);
                    adapterDateLists.add(adapterDateList);
                }
                return adapterDateLists;
        }
    }

    public void updateWithMood(String mood){
        this.mood = mood;
        notifyDataSetChanged(this.mood,localUserNotes);
    }

    @Override
    public void onPause() {
        super.onPause();
    }
}



















package com.example.bianqian.activity;

import android.content.Intent;
import android.support.v4.content.ContextCompat;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.example.bianqian.R;
import com.example.bianqian.bmobbasic.User;
import com.example.bianqian.bmobbasic.UserNote;
import com.example.bianqian.db.LocalUserNote;
import com.example.bianqian.impl.GetFindData;
import com.example.bianqian.util.UpdateUserNote;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import cn.bmob.v3.BmobUser;

public class EditingTextActivity extends BasicActivity implements View.OnClickListener {
    //创建新的文本
    public static final String CREATNOTE = "creatNote";
    //更正文本
    public static final String CHANGENOTE = "changeNote";
    //心情颜色
    public static final String MOOD = "mood";
    //日期
    public static final String DATE = "date";
    //文本
    public static final String TEXT = "text";
    //创建或更新类型
    public static final String TYPE = "type";
    //文本id
    public static final String NOTEID = "noteId";
    //防止多次点击完成
    private boolean isComplete;
    private Button completeButton, redButton, purpleButton, pinkButton, yellowButton, greenButton, blueButton, grayButton;

    private ImageView backButton;
    private TextView textDate;

    private EditText editText;

    private LinearLayout backgroundLayout;
    //创建新的文本的初始值
    private String moodColor = "red";
    private String text = null;
    private String date = null;
    private String editType;
    private User user;
    private String noteId;

    private GetFindData<UserNote> getResult;

    @Override
    public void setContentView() {
        setContentView(R.layout.activity_editing_text);
    }

    @Override
    public void initViews() {
        backButton = (ImageView) findViewById(R.id.editing_backbutton);
        completeButton = (Button) findViewById(R.id.editing_complete);
        redButton = (Button) findViewById(R.id.editing_red_button);
        purpleButton = (Button) findViewById(R.id.editing_purple_button);
        pinkButton = (Button) findViewById(R.id.editing_pink_button);
        yellowButton = (Button) findViewById(R.id.editing_yellow_button);
        greenButton = (Button) findViewById(R.id.editing_green_button);
        blueButton = (Button) findViewById(R.id.editing_blue_button);
        grayButton = (Button) findViewById(R.id.editing_gray_button);
        textDate = (TextView) findViewById(R.id.editing_textdate);
        editText = (EditText) findViewById(R.id.editing_edittext);
        backgroundLayout = (LinearLayout) findViewById(R.id.editing_background);
    }

    @Override
    public void initListeners() {
        backButton.setOnClickListener(this);
        completeButton.setOnClickListener(this);
        redButton.setOnClickListener(this);
        purpleButton.setOnClickListener(this);
        pinkButton.setOnClickListener(this);
        yellowButton.setOnClickListener(this);
        greenButton.setOnClickListener(this);
        blueButton.setOnClickListener(this);
        grayButton.setOnClickListener(this);
    }

    @Override
    public void initData() {
        //获取当前用户
        user = BmobUser.getCurrentUser(User.class);
        Intent intent = getIntent();
        //获取一些传入的参数
        editType = intent.getStringExtra(TYPE);
        date = intent.getStringExtra(DATE);
        text = intent.getStringExtra(TEXT);
        moodColor = intent.getStringExtra(MOOD);
        noteId = intent.getStringExtra(NOTEID);

        isComplete = false;
        //数据操作的回调
        /*getResult = new GetFindData<UserNote>() {
            @Override
            public void returnFindData(List<UserNote> findData,Boolean isSuccess) {    }

            @Override
            public void deletDataResult(List<LocalUserNote> deletSuccessItem) {     }

            @Override
            public void creatNotesResult(List<LocalUserNote> creatSuccessItems) {

            }

            @Override
            public void updateNotesResult(List<LocalUserNote> updateSuccessItems) {

            }

            //新建数据成功会关闭该Activity
            @Override
            public void creatDataResult(Boolean isSuccess) {
                if(isSuccess){
                    finish();
                }else {
                    isComplete = false;
                }

            }
            //更新数据成功会关闭该Activity
            @Override
            public void upDataResult(Boolean isSuccess) {
                if(isSuccess){
                    finish();
                }else {
                    isComplete = false;
                }
            }
        };*/
        //如果是创建数据调用CreateNote方法
        if(editType.equals(CREATNOTE)){
            intilizeCreatNote(moodColor);
        }
        //如果是更新数据调用ChangeNote方法
        if(editType.equals(CHANGENOTE)){
            intilizeChangeNote(moodColor);
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            //返回键直接关闭activity
            case R.id.editing_backbutton:
                finish();
                break;
            //颜色键调用颜色改变的方法
            case R.id.editing_red_button:
                moodColor = "red";
                intilizeColor(moodColor);
                break;
            case R.id.editing_purple_button:
                moodColor = "purple";
                intilizeColor(moodColor);
                break;
            case R.id.editing_pink_button:
                moodColor = "pink";
                intilizeColor(moodColor);
                break;
            case R.id.editing_yellow_button:
                moodColor = "yellow";
                intilizeColor(moodColor);
                break;
            case R.id.editing_green_button:
                moodColor = "green";
                intilizeColor(moodColor);
                break;
            case R.id.editing_blue_button:
                moodColor = "blue";
                intilizeColor(moodColor);
                break;
            case R.id.editing_gray_button:
                moodColor = "gray";
                intilizeColor(moodColor);
                break;
            case R.id.editing_complete:
                //完成键先设置isComplete为true防止多次点击，然后根据类型分别创建或更新数据
                if (!isComplete) {
                    isComplete = true;
                    /*UserNote userNote = new UserNote();
                    userNote.setUser(user);
                    userNote.setMoodColor(moodColor);
                    userNote.setNote(editText.getText().toString());*/

					LocalUserNote userNote = new LocalUserNote();
					userNote.setUser(user);
					userNote.setMoonColor(moodColor);
					userNote.setNote(editText.getText().toString());
					userNote.setUpdateDate(new Date(System.currentTimeMillis()));
					
                    if (editType.equals(CREATNOTE)) {
                        //存储新建的
                        //UpdateUserNote.creatNewNote(userNote, this, getResult);
						userNote.setNoteId("");
						userNote.setUpdateType("creat");
						userNote.save();
                    }

                    if (editType.equals(CHANGENOTE)) {
                        //更新后台数据
                        //UpdateUserNote.updateNote(userNote, noteId, this, getResult);
						if(noteId.equal("")){
						userNote.setNoteId("");
						userNote.setUpdateType("creat");
						}else{
						userNote.setNoteId(noteId);
						userNote.setUpdateType("update");
						}
						userNote.save();
                    }
					finish();
                    break;
                }
        }
    }

    private void intilizeColor(String color){
        switch (color){
            case "red" :
                backgroundLayout.setBackgroundResource(R.color.text_background_red);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_red));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_red));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_red));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_red));
                break;
            case "purple" :
                backgroundLayout.setBackgroundResource(R.color.text_background_purple);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_purple));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_purple));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_purple));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_purple));
                break;
            case "pink" :
                backgroundLayout.setBackgroundResource(R.color.text_background_pink);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_pink));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_pink));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_pink));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_pink));
                break;
            case "yellow" :
                backgroundLayout.setBackgroundResource(R.color.text_background_yellow);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_yellow));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_yellow));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_yellow));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_yellow));
                break;
            case "green" :
                backgroundLayout.setBackgroundResource(R.color.text_background_green);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_green));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_green));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_green));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_green));
                break;
            case "blue" :
                backgroundLayout.setBackgroundResource(R.color.text_background_blue);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_blue));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_blue));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_blue));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_blue));
                break;
            case "gray" :
                backgroundLayout.setBackgroundResource(R.color.text_background_gray);
                textDate.setTextColor(ContextCompat.getColor(this,R.color.text_gray));
                editText.setTextColor(ContextCompat.getColor(this,R.color.text_gray));
                backButton.setColorFilter(ContextCompat.getColor(this,R.color.text_gray));
                completeButton.setTextColor(ContextCompat.getColor(this,R.color.text_gray));
                break;
        }
    }

    private void intilizeCreatNote(String color){
        //从本地获得
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String times = format.format(new Date(System.currentTimeMillis()));
        textDate.setText(times);
        //获取服务器的时间
        /*Bmob.getServerTime(new QueryListener<Long>() {
            @Override
            public void done(Long aLong, BmobException e) {
                if(e == null){
                    //从服务器获得
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String times = format.format(new Date(aLong * 1000L));
                    textDate.setText(times);
                }else {
                    //从本地获得
                    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String times = format.format(new Date(System.currentTimeMillis()));
                    textDate.setText(times);
                }
            }
        });*/

        editText.setText(text);
        intilizeColor(color);
    }
    //初始文本
    private void intilizeChangeNote(String color){
        textDate.setText(date);
        editText.setText(text);
        intilizeColor(color);
    }

}





